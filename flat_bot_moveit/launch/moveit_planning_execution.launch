<launch>
  <!-- The planning and execution components of MoveIt! configured to run -->
  <!-- using the ROS-Industrial interface. -->
 
  <!-- Non-standard joint names:
       - Create a file [robot_moveit_config]/config/joint_names.yaml
           controller_joint_names: [joint_1, joint_2, ... joint_N] 
       - Update with joint names for your robot (in order expected by rbt controller)
       - and uncomment the following line: -->
  <rosparam command="load" file="$(find flat_bot_moveit)/config/joint_names.yaml"/>
 
  <!-- the "sim" argument controls whether we connect to a Simulated or Real robot -->
  <!--  - if sim=false, a robot_ip argument is required -->
  <arg name="sim" default="true" />
  <arg name="robot_ip" unless="$(arg sim)" />
 
  <!-- load the robot_description parameter before launching ROS-I nodes -->
  <include file="$(find flat_bot_moveit)/launch/planning_context.launch" >
    <arg name="load_robot_description" value="true" />
  </include>

  <!-- run the robot simulator and action interface nodes -->
  <group if="$(arg sim)">
    <!-- include file="$(find industrial_robot_simulator)/launch/robot_interface_simulator.launch" /-->
    <!-- =================== Start gazebo and add FlatBot robot ======================================== -->
    <include file="$(find flat_bot_moveit)/launch/empty_world.launch">
      <arg name="debug" value="false" />
      <arg name="gui" value="true" />
      <arg name="paused" value="false"/>
      <arg name="use_sim_time" value="true"/>
      <arg name="headless" value="false"/>
    </include>
    <node name="urdf_spawner_robot" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
      args="-urdf -model FlatBot_Different -param robot_description -x 0 -y 0 -z 0"/>
      
    <!-- spawn passive sirom connector -->
    <param name="passive_sirom_description"
      command="$(find xacro)/xacro --inorder $(find flat_bot_support)/urdf/passive_sirom.xacro" />
    <node name="urdf_spawner_psirom" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
      args="-urdf -model passive_sirom -param passive_sirom_description -x -1 -y 0 -z 0"/>
    
    <!-- Fake Calibration -->
    <node pkg="rostopic" type="rostopic" name="fake_joint_calibration"
          args="pub /calibrated std_msgs/Bool true" />
  
    <!-- joint_state_controller -->
    <rosparam file="$(find flat_bot_moveit)/config/joint_state_controller.yaml" command="load"/>
    <node name="joint_state_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn joint_state_controller" respawn="false" output="screen"/>
      
    <!--  Arm Joint Controllers -->
    <rosparam file="$(find flat_bot_moveit)/config/arm_controller.yaml" command="load"/>
    <node name="arm_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn arm_controller" respawn="false" output="screen"/>
    
    <!-- Latch Controllers -->
    <rosparam file="$(find flat_bot_support)/config/latch_controllers.yaml" command="load"/>
    <node name="latch_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
      output="screen" args="latch_a_position_controller latch_b_position_controller"/>
    
  </group>

      <!-- Remap follow_joint_trajectory -->
      <remap from="/joint_trajectory_action/cancel" to="/arm_controller/follow_joint_trajectory/cancel"/>
      <remap from="/joint_trajectory_action/feedback" to="/arm_controller/follow_joint_trajectory/feedback"/>
      <remap from="/joint_trajectory_action/goal" to="/arm_controller/follow_joint_trajectory/goal"/>
      <remap from="/joint_trajectory_action/result" to="/arm_controller/follow_joint_trajectory/result"/>
      <remap from="/joint_trajectory_action/status" to="/arm_controller/follow_joint_trajectory/status"/>

  <!-- run the "real robot" interface nodes -->
  <!--   - this typically includes: robot_state, motion_interface, and joint_trajectory_action nodes -->
  <!--   - replace these calls with appropriate robot-specific calls or launch files -->
  <group unless="$(arg sim)">
    <include file="$(find flat_bot_moveit)/launch/robot_interface.launch" >
      <arg name="robot_ip" value="$(arg robot_ip)"/>
    </include>
  </group>

  <!-- publish the robot state (tf transforms) -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

  <include file="$(find flat_bot_moveit)/launch/move_group.launch">
    <arg name="publish_monitored_planning_scene" value="true" />
  </include>

  <include file="$(find flat_bot_moveit)/launch/moveit_rviz.launch">
    <arg name="config" value="true"/>
  </include>
  
  <!--include file="$(find flat_bot_moveit)/launch/default_warehouse_db.launch" /-->

</launch>